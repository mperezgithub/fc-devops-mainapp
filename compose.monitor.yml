services:
  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./tools/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - data_loki:/loki      
    networks:
      - monitor
  promtail:
    depends_on:
      - loki
    container_name: promtail
    image: grafana/promtail:latest
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - /var/log:/var/log:ro
      - ./tools/loki/promtail-config.yaml:/etc/promtail/promtail-config.yaml
    networks:
      - monitor

# Colector OpenTelemetry - Recopila m√©tricas y trazas de los servicios
  otel:
    container_name: otel
    image: otel/opentelemetry-collector-contrib:latest
    command: [--config=/etc/otel-collector-config.yaml]
    volumes:
      - ./tools/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '13133:13133' # health_check extension
      - '8888:8888' # Prometheus metrics exposed by the collector
      - '8889:8889' # Prometheus exporter metrics
    networks:
      - monitor
    depends_on:
      - jaeger
      - prometheus


# Jaeger - Sistema de trazabilidad distribuida
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - '4317:4317' # gRPC protocol
      - '9411:9411'
      - '16686:16686' # Jaeger UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitor

# Prometheus - Sistema de monitoreo y alertas
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./tools/prometheus/prometheus.yaml:/etc/prometheus.yaml
      - "./tools/prometheus/rules.yml:/etc/prometheus/rules.yml"
      - prometheus-data:/prometheus
    command:
      - --web.enable-lifecycle
      - --config.file=/etc/prometheus.yaml
      - --enable-feature=otlp-write-receiver
    restart: always
    ports:
      - '9090:9090' # UI
    networks:
      - monitor

  # Grafana - Visualization tool
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Set admin password for Grafana
    depends_on:
      - prometheus
      - jaeger
    networks:
      - monitor
    volumes:
      - grafana-data:/var/lib/grafana

# cAdvisor - Container monitoring tool
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8082:8080"  # Expose cAdvisor UI on port 8080
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker:/var/lib/docker:ro"
      - "/sys/fs/cgroup:/sys/fs/cgroup:ro" 
    restart: always
    privileged: true  # Required for some containers to gather metrics
    networks:
      - monitor

volumes:
  log-data:
    driver: local
  prometheus-data:
  grafana-data:
  data_loki:
    driver: local


networks:
  monitor:
